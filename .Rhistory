# return(partition_vars_by_group)
}
part_variables_by_correlation(matrix_coef_contigency, 0.6)
part_variables_by_correlation = function(correlation_matrix, significant_level){
vector_names_signif_vars = matrix_names_cols = colnames(correlation_matrix)
list_signif_vars = get_significant_correlations(correlation_matrix, significant_level)
names(list_signif_vars) = matrix_names_cols
partition_vars_by_group = list('nao_correlacionadas' = list(),
'correlacionadas' = list())
indice = 1
for(vector_signif_vars in list_signif_vars){
# if(length(vector_signif_vars)==1){
#   partition_vars_by_group$nao_correlacionadas = append(partition_vars_by_group$nao_correlacionadas,
#                                                       matrix_names_cols[indice])
# }else{
#
#
#   partition_vars_by_group_correlated = lapply(list(vector_signif_vars), function(x) x[!is.na(x)])
#   partition_vars_by_group$correlacionadas = append(partition_vars_by_group$correlacionadas,
#                                                partition_vars_by_group_correlated )
#
#   len_vetor = length(partition_vars_by_group$correlacionadas)
#
#   names(partition_vars_by_group$correlacionadas)[len_vetor] = matrix_names_cols[indice]
# }
print('-----name------')
name_vector = vector_names_signif_vars[indice]
print(name_vector)
print('-----result-----')
vector_signif_vars = sapply(list(vector_signif_vars), function(x) x[!is.na(x)]) %>% t %>% t
print((vector_signif_vars))
print('_____vec_row_names_value___')
vec_row_names = row.names(vector_signif_vars)
vec_filter_name_row_equal_name_vec = name_vector == vec_row_names
print((vector_signif_vars[vec_filter_name_row_equal_name_vec,1]))
indice = indice + 1
}
# return(partition_vars_by_group)
}
part_variables_by_correlation(matrix_coef_contigency, 0.6)
part_variables_by_correlation = function(correlation_matrix, significant_level){
vector_names_signif_vars = matrix_names_cols = colnames(correlation_matrix)
list_signif_vars = get_significant_correlations(correlation_matrix, significant_level)
names(list_signif_vars) = matrix_names_cols
partition_vars_by_group = list('nao_correlacionadas' = list(),
'correlacionadas' = list())
indice = 1
for(vector_signif_vars in list_signif_vars){
# if(length(vector_signif_vars)==1){
#   partition_vars_by_group$nao_correlacionadas = append(partition_vars_by_group$nao_correlacionadas,
#                                                       matrix_names_cols[indice])
# }else{
#
#
#   partition_vars_by_group_correlated = lapply(list(vector_signif_vars), function(x) x[!is.na(x)])
#   partition_vars_by_group$correlacionadas = append(partition_vars_by_group$correlacionadas,
#                                                partition_vars_by_group_correlated )
#
#   len_vetor = length(partition_vars_by_group$correlacionadas)
#
#   names(partition_vars_by_group$correlacionadas)[len_vetor] = matrix_names_cols[indice]
# }
print('-----name------')
name_vector = vector_names_signif_vars[indice]
print(name_vector)
print('-----result-----')
vector_signif_vars = sapply(list(vector_signif_vars), function(x) x[!is.na(x)]) %>% t %>% t
print((vector_signif_vars))
print('_____vec_row_names_value___')
vec_row_names = row.names(vector_signif_vars)
vec_filter_name_row_equal_name_vec = name_vector == vec_row_names
print(vec_filter_name_row_equal_name_vec)
print((vector_signif_vars[vec_filter_name_row_equal_name_vec,1]))
indice = indice + 1
}
# return(partition_vars_by_group)
}
part_variables_by_correlation(matrix_coef_contigency, 0.6)
part_variables_by_correlation = function(correlation_matrix, significant_level){
vector_names_signif_vars = matrix_names_cols = colnames(correlation_matrix)
list_signif_vars = get_significant_correlations(correlation_matrix, significant_level)
names(list_signif_vars) = matrix_names_cols
partition_vars_by_group = list('nao_correlacionadas' = list(),
'correlacionadas' = list())
indice = 1
for(vector_signif_vars in list_signif_vars){
# if(length(vector_signif_vars)==1){
#   partition_vars_by_group$nao_correlacionadas = append(partition_vars_by_group$nao_correlacionadas,
#                                                       matrix_names_cols[indice])
# }else{
#
#
#   partition_vars_by_group_correlated = lapply(list(vector_signif_vars), function(x) x[!is.na(x)])
#   partition_vars_by_group$correlacionadas = append(partition_vars_by_group$correlacionadas,
#                                                partition_vars_by_group_correlated )
#
#   len_vetor = length(partition_vars_by_group$correlacionadas)
#
#   names(partition_vars_by_group$correlacionadas)[len_vetor] = matrix_names_cols[indice]
# }
print('-----name------')
name_vector = vector_names_signif_vars[indice]
print(name_vector)
print('-----result-----')
vector_signif_vars = sapply(list(vector_signif_vars), function(x) x[!is.na(x)]) %>% t %>% t
print((vector_signif_vars))
print('_____vec_row_names_value___')
vec_row_names = row.names(vector_signif_vars)
vec_filter_name_row_equal_name_vec = name_vector != vec_row_names
print(vec_filter_name_row_equal_name_vec)
print((vector_signif_vars[vec_filter_name_row_equal_name_vec,1]))
indice = indice + 1
}
# return(partition_vars_by_group)
}
part_variables_by_correlation(matrix_coef_contigency, 0.6)
part_variables_by_correlation = function(correlation_matrix, significant_level){
vector_names_signif_vars = matrix_names_cols = colnames(correlation_matrix)
list_signif_vars = get_significant_correlations(correlation_matrix, significant_level)
names(list_signif_vars) = matrix_names_cols
partition_vars_by_group = list('nao_correlacionadas' = list(),
'correlacionadas' = list())
indice = 1
for(vector_signif_vars in list_signif_vars){
# if(length(vector_signif_vars)==1){
#   partition_vars_by_group$nao_correlacionadas = append(partition_vars_by_group$nao_correlacionadas,
#                                                       matrix_names_cols[indice])
# }else{
#
#
#   partition_vars_by_group_correlated = lapply(list(vector_signif_vars), function(x) x[!is.na(x)])
#   partition_vars_by_group$correlacionadas = append(partition_vars_by_group$correlacionadas,
#                                                partition_vars_by_group_correlated )
#
#   len_vetor = length(partition_vars_by_group$correlacionadas)
#
#   names(partition_vars_by_group$correlacionadas)[len_vetor] = matrix_names_cols[indice]
# }
print('-----name------')
name_vector = vector_names_signif_vars[indice]
print(name_vector)
print('-----result-----')
vector_signif_vars = sapply(list(vector_signif_vars), function(x) x[!is.na(x)]) %>% t %>% t
print('_____vec_row_names_value___')
vec_row_names = row.names(vector_signif_vars)
vec_filter_name_row_equal_name_vec = name_vector != vec_row_names
print((vector_signif_vars[vec_filter_name_row_equal_name_vec,1]))
indice = indice + 1
}
# return(partition_vars_by_group)
}
part_variables_by_correlation(matrix_coef_contigency, 0.6)
part_variables_by_correlation = function(correlation_matrix, significant_level){
vector_names_signif_vars = matrix_names_cols = colnames(correlation_matrix)
list_signif_vars = get_significant_correlations(correlation_matrix, significant_level)
names(list_signif_vars) = matrix_names_cols
partition_vars_by_group = list('nao_correlacionadas' = list(),
'correlacionadas' = list())
indice = 1
for(vector_signif_vars in list_signif_vars){
# if(length(vector_signif_vars)==1){
#   partition_vars_by_group$nao_correlacionadas = append(partition_vars_by_group$nao_correlacionadas,
#                                                       matrix_names_cols[indice])
# }else{
#
#
#   partition_vars_by_group_correlated = lapply(list(vector_signif_vars), function(x) x[!is.na(x)])
#   partition_vars_by_group$correlacionadas = append(partition_vars_by_group$correlacionadas,
#                                                partition_vars_by_group_correlated )
#
#   len_vetor = length(partition_vars_by_group$correlacionadas)
#
#   names(partition_vars_by_group$correlacionadas)[len_vetor] = matrix_names_cols[indice]
# }
print('-----name------')
name_vector = vector_names_signif_vars[indice]
print(name_vector)
print('-----result-----')
vector_signif_vars = sapply(list(vector_signif_vars), function(x) x[!is.na(x)]) %>% t %>% t
vec_row_names = row.names(vector_signif_vars)
vec_filter_name_row_equal_name_vec = name_vector != vec_row_names
vector_signif_vars = vector_signif_vars[vec_filter_name_row_equal_name_vec,1]
print(vector_signif_vars)
indice = indice + 1
}
# return(partition_vars_by_group)
}
part_variables_by_correlation(matrix_coef_contigency, 0.6)
numeric(0)
length(numeric(0))
part_variables_by_correlation = function(correlation_matrix, significant_level){
vector_names_signif_vars = matrix_names_cols = colnames(correlation_matrix)
list_signif_vars = get_significant_correlations(correlation_matrix, significant_level)
names(list_signif_vars) = matrix_names_cols
partition_vars_by_group = list('nao_correlacionadas' = list(),
'correlacionadas' = list())
indice = 1
for(vector_signif_vars in list_signif_vars){
name_vector = vector_names_signif_vars[indice]
vector_signif_vars = sapply(list(vector_signif_vars), function(x) x[!is.na(x)]) %>% t %>% t
vec_row_names = row.names(vector_signif_vars)
vec_filter_name_row_equal_name_vec = name_vector != vec_row_names
vector_signif_vars = vector_signif_vars[vec_filter_name_row_equal_name_vec,1]
if(length(vector_signif_vars)==0){
partition_vars_by_group$nao_correlacionadas = append(partition_vars_by_group$nao_correlacionadas,
name_vector)
}else{
partition_vars_by_group$correlacionadas = append(partition_vars_by_group$correlacionadas,
vector_signif_vars )
len_vetor = length(partition_vars_by_group$correlacionadas)
names(partition_vars_by_group$correlacionadas)[len_vetor] = name_vector
}
indice = indice + 1
}
return(partition_vars_by_group)
}
part_variables_by_correlation(matrix_coef_contigency, 0.6)
part_variables_by_correlation(matrix_coef_contigency, 0.6)$correlacionadas
part_variables_by_correlation = function(correlation_matrix, significant_level){
vector_names_signif_vars = matrix_names_cols = colnames(correlation_matrix)
list_signif_vars = get_significant_correlations(correlation_matrix, significant_level)
names(list_signif_vars) = matrix_names_cols
partition_vars_by_group = list('nao_correlacionadas' = list(),
'correlacionadas' = list())
indice = 1
for(vector_signif_vars in list_signif_vars){
name_vector = vector_names_signif_vars[indice]
vector_signif_vars = sapply(list(vector_signif_vars), function(x) x[!is.na(x)]) %>% t %>% t
vec_row_names = row.names(vector_signif_vars)
vec_filter_name_row_equal_name_vec = name_vector != vec_row_names
vector_signif_vars = vector_signif_vars[vec_filter_name_row_equal_name_vec,1]
if(length(vector_signif_vars)==0){
partition_vars_by_group$nao_correlacionadas = append(partition_vars_by_group$nao_correlacionadas,
name_vector)
}else{
partition_vars_by_group$correlacionadas = append(partition_vars_by_group$correlacionadas,
list(vector_signif_vars ))
len_vetor = length(partition_vars_by_group$correlacionadas)
names(partition_vars_by_group$correlacionadas)[len_vetor] = name_vector
}
indice = indice + 1
}
return(partition_vars_by_group)
}
part_variables_by_correlation(matrix_coef_contigency, 0.6)$correlacionadas
matrix_coef_contigency = calcule_multiple_coef_contigency(categoricas)
cat_vars_associated = part_variables_by_correlation(matrix_coef_contigency, 0.6)$correlacionadas
cat_vars_associated
find_enough_vars_correlated(cat_vars_associated[cat_names_ordered])
cat_vars_associated
mean(F)
find_enough_vars_correlated = function(list_vars_correlated){
vars_correlated_with_someone = c()
all_possibles_vars_correlated = c()
names_geral = names(list_vars_correlated)
cont_from_all_vars = 1
cont_from_only_vars_correlated = 1
for(actual_vars in list_vars_correlated){
actual_names = names(actual_vars)
index_new_vars_correlatead = !(actual_names %in% all_possibles_vars_correlated)
all_possibles_vars_correlated = append(all_possibles_vars_correlated, actual_names[index_new_vars_correlatead])
print(index_new_vars_correlatead)
# if(mean(index_new_vars_correlatead)!=1 || cont_from_all_vars == 1){
#   vars_correlated_with_someone[cont_from_only_vars_correlated] = names_geral[cont_from_all_vars]
#   cont_from_only_vars_correlated = cont_from_only_vars_correlated + 1
# }
#
cont_from_all_vars = cont_from_all_vars + 1
# if(length(all_possibles_vars_correlated) == length(names_geral)){
#   break
# }
}
return(vars_correlated_with_someone)
}
find_enough_vars_correlated(cat_vars_associated[cat_names_ordered])
mean(logical(0))
mean(NaN)
find_enough_vars_correlated = function(list_vars_correlated){
vars_correlated_with_someone = c()
all_possibles_vars_correlated = c()
names_geral = names(list_vars_correlated)
cont_from_all_vars = 1
cont_from_only_vars_correlated = 1
for(actual_vars in list_vars_correlated){
actual_names = names(actual_vars)
index_new_vars_correlatead = !(actual_names %in% all_possibles_vars_correlated)
all_possibles_vars_correlated = append(all_possibles_vars_correlated, actual_names[index_new_vars_correlatead])
print(index_new_vars_correlatead)
if(mean(index_new_vars_correlatead)!=1 || cont_from_all_vars == 1){
vars_correlated_with_someone[cont_from_only_vars_correlated] = names_geral[cont_from_all_vars]
cont_from_only_vars_correlated = cont_from_only_vars_correlated + 1
}
cont_from_all_vars = cont_from_all_vars + 1
if(length(all_possibles_vars_correlated) == length(names_geral)){
break
}
}
return(vars_correlated_with_someone)
}
cat_vars_associated = part_variables_by_correlation(matrix_coef_contigency, 0.6)$correlacionadas
cat_names_ordered = sapply(cat_vars_associated, function(x) length(x)) %>% sort(decreasing = T) %>% names
find_enough_vars_correlated(cat_vars_associated[cat_names_ordered])
find_enough_vars_correlated = function(list_vars_correlated){
vars_correlated_with_someone = c()
all_possibles_vars_correlated = c()
names_geral = names(list_vars_correlated)
cont_from_all_vars = 1
cont_from_only_vars_correlated = 1
for(actual_vars in list_vars_correlated){
actual_names = names(actual_vars)
index_new_vars_correlatead = !(actual_names %in% all_possibles_vars_correlated)
all_possibles_vars_correlated = append(all_possibles_vars_correlated, actual_names[index_new_vars_correlatead])
if(mean(index_new_vars_correlatead)!=1 || cont_from_all_vars == 1){
vars_correlated_with_someone[cont_from_only_vars_correlated] = names_geral[cont_from_all_vars]
cont_from_only_vars_correlated = cont_from_only_vars_correlated + 1
}
cont_from_all_vars = cont_from_all_vars + 1
if(length(all_possibles_vars_correlated) == length(names_geral)){
break
}
}
return(vars_correlated_with_someone)
}
find_enough_vars_correlated(cat_vars_associated[cat_names_ordered])
matrix_coef_contigency = calcule_multiple_coef_contigency(categoricas)
cat_vars_associated = part_variables_by_correlation(matrix_coef_contigency, 0.6)$correlacionadas
cat_names_ordered = sapply(cat_vars_associated, function(x) length(x)) %>% sort(decreasing = T) %>% names
enough_vars_associated = find_enough_vars_correlated(cat_vars_associated[cat_names_ordered])
length(enough_vars_associated)
length(names(cat_vars_associated))
length(names(categoricas))
library(corrplot)
numericas_tratado = na.omit(numericas[-1])
correlation_matrix = cor(numericas_tratado)
num_vars_correlated = part_variables_by_correlation(correlation_matrix, 0.7)$correlacionadas
num_names_ordered = sapply(num_vars_correlated, function(x) length(x)) %>% sort(decreasing = F) %>% names
enough_vars_correlated = find_enough_vars_correlated(num_vars_correlated[num_names_ordered])
length(enough_vars_correlated)
length(names(num_vars_correlated))
length(names(numericas))
find_enough_vars_correlated(num_vars_correlated[num_names_ordered])
part_variables_by_correlation(correlation_matrix, 0.7)$correlacionadas
cor(numericas_tratado)
correlation_matrix = cor(numericas_tratado)
part_variables_by_correlation(correlation_matrix, 0.7)$correlacionadas
num_vars_correlated = part_variables_by_correlation(correlation_matrix, 0.6)$correlacionadas
part_variables_by_correlation(correlation_matrix, 0.6)$correlacionadas
sapply(num_vars_correlated, function(x) length(x)) %>% sort(decreasing = T) %>% names
num_vars_correlated[num_names_ordered]
num_names_ordered = sapply(num_vars_correlated, function(x) length(x)) %>% sort(decreasing = T) %>% names
num_vars_correlated[num_names_ordered]
find_enough_vars_correlated(num_vars_correlated[num_names_ordered])
library(corrplot)
numericas_tratado = na.omit(numericas[-1])
correlation_matrix = cor(numericas_tratado)
num_vars_correlated = part_variables_by_correlation(correlation_matrix, 0.6)$correlacionadas
num_names_ordered = sapply(num_vars_correlated, function(x) length(x)) %>% sort(decreasing = T) %>% names
enough_vars_correlated = find_enough_vars_correlated(num_vars_correlated[num_names_ordered])
length(enough_vars_correlated)
length(names(num_vars_correlated))
length(names(numericas))
matrix_coef_contigency = calcule_multiple_coef_contigency(categoricas)
cat_vars_associated = part_variables_by_correlation(matrix_coef_contigency, 0.6)$correlacionadas
cat_names_ordered = sapply(cat_vars_associated, function(x) length(x)) %>% sort(decreasing = T) %>% names
enough_vars_associated = find_enough_vars_correlated(cat_vars_associated[cat_names_ordered])
length(enough_vars_associated)
length(names(cat_vars_associated))
length(names(categoricas))
part_variables_by_correlation = function(matrix_correlation, significant_level){
vector_names_signif_vars = matrix_names_cols = colnames(matrix_correlation)
list_signif_vars = get_significant_correlations(matrix_correlation, significant_level)
names(list_signif_vars) = matrix_names_cols
list_partition_vars_by_group = list('nao_correlacionadas' = list(),
'correlacionadas' = list())
indice = 1
for(vector_signif_vars in list_signif_vars){
name_vector = vector_names_signif_vars[indice]
vector_signif_vars = clear_vector_signif_vars(vector_signif_vars, name_vector)
if(length(vector_signif_vars)==0){
list_partition_vars_by_group$nao_correlacionadas = append(list_partition_vars_by_group$nao_correlacionadas,
name_vector)
}else{
list_partition_vars_by_group$correlacionadas = append(list_partition_vars_by_group$correlacionadas,
list(vector_signif_vars ))
len_vetor = length(list_partition_vars_by_group$correlacionadas)
names(list_partition_vars_by_group$correlacionadas)[len_vetor] = name_vector
}
indice = indice + 1
}
return(list_partition_vars_by_group)
}
matrix_coef_contigency = calcule_multiple_coef_contigency(categoricas)
cat_vars_associated = part_variables_by_correlation(matrix_coef_contigency, 0.6)$correlacionadas
clear_vector_signif_vars = function(vector_signif_vars, name_vector){
#removing na´s and setting a shape [,1] in the vector
vector_signif_vars = sapply(list(vector_signif_vars), function(x) x[!is.na(x)]) %>% t %>% t
vec_row_names = row.names(vector_signif_vars)
vec_filter_name_diff_name_vector = name_vector != vec_row_names
vector_signif_vars = vector_signif_vars[vec_filter_name_diff_name_vector, 1]
return(vector_signif_vars)
}
matrix_coef_contigency = calcule_multiple_coef_contigency(categoricas)
cat_vars_associated = part_variables_by_correlation(matrix_coef_contigency, 0.6)$correlacionadas
cat_names_ordered = sapply(cat_vars_associated, function(x) length(x)) %>% sort(decreasing = T) %>% names
enough_vars_associated = find_enough_vars_correlated(cat_vars_associated[cat_names_ordered])
length(enough_vars_associated)
length(names(cat_vars_associated))
length(names(categoricas))
setwd('D:/pibic')
source('./src/utils.R')
options(scipen=999)
pacman::p_load('tidyverse','DescTools')
#Retirando essas variáveis dos bancos de dados pois elas apresentavam muitos valores faltantes
#na hora das análises e os valores que restavam não influenciava muito na variável resposta
df_treino = read.csv('data/train.csv') %>%
dplyr::select(!c(Alley,PoolQC,Fence,MiscFeature))
df_test = read.csv('data/test.csv') %>%
dplyr::select(!c(Alley,PoolQC,Fence,MiscFeature))
y = df_treino$SalePrice
df_treino = df_treino %>%
dplyr::select(!c(SalePrice))
col_num = sapply(df_treino, typeof) == "integer"
col_char = sapply(df_treino, typeof) == "character"
numericas = df_treino[col_num]
categoricas = df_treino[col_char]
length(numericas) + length(categoricas)
library(corrplot)
numericas_tratado = na.omit(numericas[-1])
correlation_matrix = cor(numericas_tratado)
num_vars_correlated = part_variables_by_correlation(correlation_matrix, 0.6)$correlacionadas
num_names_ordered = sapply(num_vars_correlated, function(x) length(x)) %>% sort(decreasing = T) %>% names
enough_vars_correlated = find_list_enough_vars_correlated(num_vars_correlated[num_names_ordered])
length(enough_vars_correlated)
length(names(num_vars_correlated))
length(names(numericas))
matrix_coef_contigency = calcule_multiple_coef_contigency(categoricas)
cat_vars_associated = part_variables_by_correlation(matrix_coef_contigency, 0.6)$correlacionadas
cat_names_ordered = sapply(cat_vars_associated, function(x) length(x)) %>% sort(decreasing = T) %>% names
enough_vars_associated = find_list_enough_vars_correlated(cat_vars_associated[cat_names_ordered])
length(enough_vars_associated)
length(names(cat_vars_associated))
length(names(categoricas))
matrix_coef_contigency = calcule_multiple_coef_contigency(categoricas)
cat_vars_associated = part_variables_by_correlation(matrix_coef_contigency, 0.6)$correlacionadas
cat_vars_not_associated = part_variables_by_correlation(matrix_coef_contigency, 0.6)$correlacionadas
cat_names_ordered = sapply(cat_vars_associated, function(x) length(x)) %>% sort(decreasing = T) %>% names
enough_vars_associated = find_list_enough_vars_correlated(cat_vars_associated[cat_names_ordered])
print('Número de variáveis categóricas')
print(length(names(categoricas)))
print('Número de variáveis que possuem uma associação forte com alguma variável')
print(length(names(cat_vars_associated)))
print('Número de variáveis que NÃO possuem uma associação forte com alguma variável')
print(length(names(cat_vars_not_associated)))
print('Número de variáveis que conseguem estar associada com todas as outras variáveis')
print(length(enough_vars_associated))
matrix_coef_contigency = calcule_multiple_coef_contigency(categoricas)
cat_vars_associated = part_variables_by_correlation(matrix_coef_contigency, 0.6)$correlacionadas
cat_vars_not_associated = part_variables_by_correlation(matrix_coef_contigency, 0.6)$nao_correlacionadas
cat_names_ordered = sapply(cat_vars_associated, function(x) length(x)) %>% sort(decreasing = T) %>% names
enough_vars_associated = find_list_enough_vars_correlated(cat_vars_associated[cat_names_ordered])
print('Número de variáveis categóricas')
print(length(names(categoricas)))
print('Número de variáveis que possuem uma associação forte com alguma variável')
print(length(names(cat_vars_associated)))
print('Número de variáveis que NÃO possuem uma associação forte com alguma variável')
print(length(names(cat_vars_not_associated)))
print('Número de variáveis que conseguem estar associada com todas as outras variáveis')
print(length(enough_vars_associated))
part_variables_by_correlation(matrix_coef_contigency, 0.6)
part_variables_by_correlation(matrix_coef_contigency, 0.6)$nao_correlacionadas
names(cat_vars_not_associated))
names(cat_vars_not_associated)
length(cat_vars_not_associated)
matrix_coef_contigency = calcule_multiple_coef_contigency(categoricas)
cat_vars_associated = part_variables_by_correlation(matrix_coef_contigency, 0.6)$correlacionadas
cat_vars_not_associated = part_variables_by_correlation(matrix_coef_contigency, 0.6)$nao_correlacionadas
cat_names_ordered = sapply(cat_vars_associated, function(x) length(x)) %>% sort(decreasing = T) %>% names
enough_vars_associated = find_list_enough_vars_correlated(cat_vars_associated[cat_names_ordered])
print('Número de variáveis categóricas')
print(length(names(categoricas)))
print('Número de variáveis que possuem uma associação forte com alguma variável')
print(length(names(cat_vars_associated)))
print('Número de variáveis que NÃO possuem uma associação forte com alguma variável')
print(length(cat_vars_not_associated))
print('Número de variáveis que conseguem estar associada com todas as outras variáveis')
print(length(enough_vars_associated))
matrix_coef_contigency = calcule_multiple_coef_contigency(categoricas)
cat_vars_associated = part_variables_by_correlation(matrix_coef_contigency, 0.5)$correlacionadas
cat_vars_not_associated = part_variables_by_correlation(matrix_coef_contigency, 0.5)$nao_correlacionadas
cat_names_ordered = sapply(cat_vars_associated, function(x) length(x)) %>% sort(decreasing = T) %>% names
enough_vars_associated = find_list_enough_vars_correlated(cat_vars_associated[cat_names_ordered])
print('Número de variáveis categóricas')
print(length(names(categoricas)))
print('Número de variáveis que possuem uma associação forte com alguma variável')
print(length(names(cat_vars_associated)))
print('Número de variáveis que NÃO possuem uma associação forte com alguma variável')
print(length(cat_vars_not_associated))
print('Número de variáveis que conseguem estar associada com todas as outras variáveis')
print(length(enough_vars_associated))
matrix_coef_contigency = calcule_multiple_coef_contigency(categoricas)
cat_vars_associated = part_variables_by_correlation(matrix_coef_contigency, 0.5)$correlacionadas
cat_vars_not_associated = part_variables_by_correlation(matrix_coef_contigency, 0.5)$nao_correlacionadas
cat_names_ordered = sapply(cat_vars_associated, function(x) length(x)) %>% sort(decreasing = T) %>% names
enough_vars_associated = find_list_enough_vars_correlated(cat_vars_associated[cat_names_ordered])
print('Número de variáveis categóricas')
print(length(names(categoricas)))
print('Número de variáveis que NÃO possuem uma associação forte com alguma variável')
print(length(cat_vars_not_associated))
print('Número de variáveis que possuem uma associação forte com alguma variável')
print(length(names(cat_vars_associated)))
print('Número de variáveis que conseguem estar associada com todas as outras variáveis')
print(length(enough_vars_associated))
